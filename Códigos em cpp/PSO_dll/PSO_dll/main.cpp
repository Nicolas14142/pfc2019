#include "Particle.h"
#include "Space.h"
#include <cstdlib>
#include <time.h>       /* time */
#include <stdio.h>      /* printf, scanf, puts, NULL */
#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>      // std::setprecision
#include <limits>
#include "PSO_dll.h"

float destX[] = {-25,-21.6667,-18.3333,-15,-11.6667,-8.33333,-5,-1.66667,1.66667,5,8.33333,11.6667,15,18.3333,21.6667,25,28.3333,31.6667,35,38.3333,41.6667,45,48.3333,51.6667,55,58.3333,61.6667,65,68.3333,71.6667,75,78.3333,81.6667,85,88.3333,91.6667,95,98.3333,101.667,105,108.333,111.667,115,118.333,121.667,125,128.333,131.667,135,138.333,141.667,145,148.333,151.667,155,158.333,161.667,165,168.333,171.667,175,178.333,181.667,185,188.333,191.667,195,198.333,201.667,205,208.333,211.667,215,218.333,221.667,225,228.333,231.667,235,238.333,241.667,245,248.333,251.667,255,258.333,261.667,265,268.333,271.667,275,278.333,281.667,285,288.333,291.667,295,298.333,301.667,305,308.333,311.667,315,318.333,321.667,325,328.333,331.667,335,338.333,341.667,345,348.333,351.667,355,358.333,361.667,365,368.333,371.667,375,378.333,381.667,385,388.333,391.667,395,398.333,401.667,405,408.333,411.667,415,418.333,421.667,425,428.333,431.667,435,438.333,441.667,445,448.333,451.667,455,458.333,461.667,465,468.333,471.667,475,478.333,481.667,485,488.333,491.667,495,498.333,501.667,505,508.333,511.667,515,518.333,521.667,525,528.333,531.667,535,538.333,541.667,545,548.333,551.667,555,558.333,561.667,565,568.333,571.667,575,578.333,581.667,585,588.333,591.667,595,598.333,601.667,605,608.333,611.667,615,618.333,621.667,625,628.333,631.667,635,638.333,641.667,645,648.333,651.667,655,658.333,661.667,665,668.333,671.667,675,678.333,681.667,685,688.333,691.667,695,698.333,701.667,705,708.333,711.667,715,718.333,721.667,725,728.333,731.667,735,738.333,741.667,745,748.333,751.667,755,758.333,761.667,765,768.333,771.667,775,778.333,781.667,785,788.333,791.667,795,798.333,801.667,805,808.333,811.667,815,818.333,821.667,825,828.333,831.667,835,838.333,841.667,845,848.333,851.667,855,858.333,861.667,865,868.333,871.667,875,878.333,881.667,885,888.333,891.667,895,898.333,901.667,905,908.333,911.667,915,918.333,921.667,925,928.333,931.667,935,938.333,941.667,945,948.333,951.667,955,958.333,961.667,965,968.333,971.667,975,978.333,981.667,985,988.333,991.667,995,998.333,1001.67,1005,1008.33,1011.67,1015,1018.33,1021.67,1025,1028.33,1031.67,1035,1038.33,1041.67,1045,1048.33,1051.67,1055,1058.33,1061.67,1065,1068.33,1071.67,1075,1078.33,1081.67,1085,1088.33,1091.67,1095,1098.33,1101.67,1105,1108.33,1111.67,1115,1118.33,1121.67,1125,1128.33,1131.67,1135,1138.33,1141.67,1145,1148.33,1151.67,1155,1158.33,1161.67,1165,1168.33,1171.67,1175,1178.33,1181.67,1185,1188.33,1191.67,1195,1198.33,1201.67,1205,1208.33,1211.67,1215,1218.33,1221.67,1225,1228.33,1231.67,1235,1238.33,1241.67,1245,1248.33,1251.67,1255,1258.33,1261.67,1265,1268.33,1271.67,1275,1278.33,1281.67,1285,1288.33,1291.67,1295,1298.33,1301.67,1305,1308.33,1311.67,1315,1318.33,1321.67,1325,1328.33,1331.67,1335,1338.33,1341.67,1345,1348.33,1351.67,1355,1358.33,1361.67,1365,1368.33,1371.67,1375,1378.33,1381.67,1385,1388.33,1391.67,1395,1398.33,1401.67,1405,1408.33,1411.67,1415,1418.33,1421.67,1425,1428.33,1431.67,1435,1438.33,1441.67,1445,1448.33,1451.67,1455,1458.33,1461.67,1465,1468.33,1471.67,1475,1478.33,1481.67,1485,1488.33,1491.67,1495,1498.33,1501.67,1505,1508.33,1511.67,1515,1518.33,1521.67,1525,1528.33,1531.67,1535,1538.33,1541.67,1545,1548.33,1551.67,1555,1558.33,1561.67,1565,1568.33,1571.67,1575,1578.33,1581.67,1585,1588.33,1591.67,1595,1598.33,1601.67,1605,1608.33,1611.67,1615,1618.33,1621.67,1625,1628.33,1631.67,1635,1638.33};
float destY[] = {-25,-21.6667,-18.3333,-15,-11.6667,-8.33333,-5,-1.66667,1.66667,5,8.33333,11.6667,15,18.3333,21.6667,25,28.3333,31.6667,35,38.3333,41.6667,45,48.3333,51.6667,55,58.3333,61.6667,65,68.3333,71.6667,75,78.3333,81.6667,85,88.3333,91.6667,95,98.3333,101.667,105,108.333,111.667,115,118.333,121.667,125,128.333,131.667,135,138.333,141.667,145,148.333,151.667,155,158.333,161.667,165,168.333,171.667,175,178.333,181.667,185,188.333,191.667,195,198.333,201.667,205,208.333,211.667,215,218.333,221.667,225,228.333,231.667,235,238.333,241.667,245,248.333,251.667,255,258.333,261.667,265,268.333,271.667,275,278.333,281.667,285,288.333,291.667,295,298.333,301.667,305,308.333,311.667,315,318.333,321.667,325,328.333,331.667,335,338.333,341.667,345,348.333,351.667,355,358.333,361.667,365,368.333,371.667,375,378.333,381.667,385,388.333,391.667,395,398.333,401.667,405,408.333,411.667,415,418.333,421.667,425,428.333,431.667,435,438.333,441.667,445,448.333,451.667,455,458.333,461.667,465,468.333,471.667,475,478.333,481.667,485,488.333,491.667,495,498.333,501.667,505,508.333,511.667,515,518.333,521.667,525,528.333,531.667,535,538.333,541.667,545,548.333,551.667,555,558.333,561.667,565,568.333,571.667,575,578.333,581.667,585,588.333,591.667,595,598.333,601.667,605,608.333,611.667,615,618.333,621.667,625,628.333,631.667,635,638.333,641.667,645,648.333,651.667,655,658.333,661.667,665,668.333,671.667,675,678.333,681.667,685,688.333,691.667,695,698.333,701.667,705,708.333,711.667,715,718.333,721.667,725,728.333,731.667,735,738.333,741.667,745,748.333,751.667,755,758.333,761.667,765,768.333,771.667,775,778.333,781.667,785,788.333,791.667,795,798.333,801.667,805,808.333,811.667,815,818.333,821.667,825,828.333,831.667,835,838.333,841.667,845,848.333,851.667,855,858.333,861.667,865,868.333,871.667,875,878.333,881.667,885,888.333,891.667,895,898.333,901.667,905,908.333,911.667,915,918.333,921.667,925,928.333,931.667,935,938.333,941.667,945,948.333,951.667,955,958.333,961.667,965,968.333,971.667,975,978.333,981.667,985,988.333,991.667,995,998.333,1001.67,1005,1008.33,1011.67,1015,1018.33,1021.67,1025,1028.33,1031.67,1035,1038.33,1041.67,1045,1048.33,1051.67,1055,1058.33,1061.67,1065,1068.33,1071.67,1075,1078.33,1081.67,1085,1088.33,1091.67,1095,1098.33,1101.67,1105,1108.33,1111.67,1115,1118.33,1121.67,1125,1128.33,1131.67,1135,1138.33,1141.67,1145,1148.33,1151.67,1155,1158.33,1161.67,1165,1168.33,1171.67,1175,1178.33,1181.67,1185,1188.33,1191.67,1195,1198.33,1201.67,1205,1208.33,1211.67,1215,1218.33,1221.67,1225,1228.33,1231.67,1235,1238.33,1241.67,1245,1248.33,1251.67,1255,1258.33,1261.67,1265,1268.33,1271.67,1275,1278.33,1281.67,1285,1288.33,1291.67,1295,1298.33,1301.67,1305,1308.33,1311.67,1315,1318.33,1321.67,1325,1328.33,1331.67,1335,1338.33,1341.67,1345,1348.33,1351.67,1355,1358.33,1361.67,1365,1368.33,1371.67,1375,1378.33,1381.67,1385,1388.33,1391.67,1395,1398.33,1401.67,1405,1408.33,1411.67,1415,1418.33,1421.67,1425,1428.33,1431.67,1435,1438.33,1441.67,1445,1448.33,1451.67,1455,1458.33,1461.67,1465,1468.33,1471.67,1475,1478.33,1481.67,1485,1488.33,1491.67,1495,1498.33,1501.67,1505,1508.33,1511.67,1515,1518.33,1521.67,1525,1528.33,1531.67,1535,1538.33,1541.67,1545,1548.33,1551.67,1555,1558.33,1561.67,1565,1568.33,1571.67,1575,1578.33,1581.67,1585,1588.33,1591.67,1595,1598.33,1601.67,1605,1608.33,1611.67,1615,1618.33,1621.67,1625,1628.33,1631.67,1635,1638.33};
double positions[] = {1.0448, -2.62078, 3.92514, -1.71163, -2.63939, -1.51814, -4.96704, -0.834529, 2.07358, -2.72515, 2.54875, -0.731986, 0.872982, 3.13623, 1.20991, -3.54701, 3.92209, 3.27113, 3.13807, -2.32444};
double infinity = std::numeric_limits<double>::infinity();
double lastBestPositions[36] = {0};
double velocities[24] = {0};
double debug[20] = {0};

void write1(int, double*, double[2], int);
void write(Space &search_space, int j);

int main() {

	float target = 10;
	int n_particles = 10;
	float c1 = 0.1;
	float c2 = 4;
	float att = 5;
	float rep = 1;
	float W = 1;
	for (int j=0; j<36; j++) lastBestPositions[j] = infinity;
	for (int j=0; j<36; j++) std::cout << lastBestPositions[j] << " ";
	std::cout << std::endl;
  
	int n_iterations = 1000;
	srand(time(NULL));

	int i = 0;
	for (i = 0; i < n_iterations; i++) {
		std::cout << "i = " << i << std::endl;
		ParticleSwarmOptimization(destX[i], destY[i], target, n_particles, c1, c2, att, rep, W, positions, lastBestPositions, velocities, debug);
		std::cout << "Best Positions" << std::endl;
		for (int j=0; j<36; j++) std::cout << lastBestPositions[j] << " ";
		std::cout << std::endl;
		double dest[2] = {destX[i], destY[i]};
		write1(n_particles, positions, dest, i);
	}

	for (i = 0; i < n_particles ; i++) {
		std::cout << positions[i*2] << ", " << positions[i*2 + 1] << ", ";
	}

#if !defined(unix) && !defined(__unix__) && !defined(__unix)
	system("pause");
#else
  system("read -p 'Press Enter to continue...' var");
#endif 
	
	return 0;
}

void write1(int nrParticles, double positions[], double destPosition[2] , int j)
{
	using namespace std;
	fstream fout;
	
	if(j==0) fout.open("enxame.csv", ofstream::out | ofstream::trunc);
	else fout.open("enxame.csv", ios::out | ios::app);

	int i;
	for (i = 0; i < nrParticles ; i++) {
		fout << positions[i*2] << ", " << positions[i*2 + 1] << ", ";
		// cout << positions[i*2] << ", " << positions[i*2 + 1] << ", ";
	}
	
	fout << destPosition[0] << "," << destPosition[1] << "\n";
	// cout << destPosition[0] << "," << destPosition[1] << "\n";
}

void write(Space &search_space, int j)
{
	using namespace std;
	// file pointer 
	fstream fout;
	// opens an existing csv file or creates a new file. 
	
	if(j==0) fout.open("enxame.csv", ofstream::out | ofstream::trunc);
	else fout.open("enxame.csv", ios::out | ios::app);

	int i;

	for (i = 0; i < search_space.n_particles ; i++) {

		// Insert the data to file 
		fout << search_space.particles[i].position[0] << ", "
			<< search_space.particles[i].position[1] << ", ";
	}
	
	fout << search_space.dest[0] <<","
	<< search_space.dest[1]<<"\n";

	//fout<< "\n";
}

